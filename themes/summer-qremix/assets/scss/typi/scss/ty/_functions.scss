// _ty-font-size
// =============
// Calls _ty-calc-font-size or _ty-base-size
@function _ty-font-size(
  $font-size,
  $breakpoint,
  $typi,
  $rem,
  $base: false,
  $typi-map: false
) {
  @if $base == true {
    @return _ty-base-size($font-size);
  } @else {
    @return _ty-calc-font-size($font-size, $breakpoint, $typi, $rem, $typi-map);
  }
}

// _ty-calc-font-size
// =======
// returns correct rem value depending on
// breakpoint
@function _ty-calc-font-size(
  $font-size,
  $breakpoint,
  $typi,
  $rem,
  $typi-map: false
) {
  @if unitless($font-size) {
    @if function-exists(ms) {
      $typi-ms: map-get($typi-map, ms);
      @if $rem {
        @return _ty-strip-unit(_ty-ms($font-size, $breakpoint, $typi-ms, $typi-map)) * 1rem;
      } @else {
        @return _ty-ms($font-size, $breakpoint, $typi-ms, $typi-map);
      }
    } @else {
      @error "Modular Scale Library required";
    }
  }

  // Convert px and em into rem
  @else if $rem {
    @if unit($font-size) == 'em' {
      @return _ty-strip-unit($font-size) * 1rem;
    }

    @else if unit($font-size) == 'px' {
      $basemap: map-get($typi, $breakpoint);
      $basefont: if(type-of($basemap) == 'list', nth($basemap, 1), $basemap);

      @if $basefont == null {
        $basefont: nth(map-get($typi, null), 1);
      }

      @return $font-size / $basefont * 1rem;
    }

    @else {
      @return $font-size;
    }
  }

  // Converts rem and px into em
  @else {
    @if unit($font-size) == 'rem' {
      @return _ty-strip-unit($font-size) * 1em;
    }

    @else if unit($font-size) == 'px' {
      $basemap: map-get($typi, $breakpoint);
      $basefont: if(type-of($basemap) == 'list', nth($basemap, 1), $basemap);

      @if $basefont == null {
        $basefont: nth(map-get($typi, null), 1);
      }

      @return _ty-em($font-size, $basefont);
    }

    @else {
      @return $font-size;
    }
  }
}

// _ty-base-size
// =============
// Converts Typi sizes into percentages
@function _ty-base-size(
  $font-size
) {
  @if unit($font-size) == 'px' {
    @return $font-size / 16px * 100%;
  }

  @else {
    @error 'Typi font sizes must be written in pixels';
  }
}


// _ty-strip-unit
// ==============
@function _ty-strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// _ty-em
// ========
@function _ty-em($font-size, $ref-size: false) {
  @if ($ref-size) {
    @return $font-size / $ref-size * 1em;
  }
}

// _ty-rem
// =========
@function _ty-rem($font-size) {
  @if unit($font-size) == 'px' {
    @return strip-unit($font-size) / 16 * 1rem;
  }
  @else if unit($font-size) == 'em' {
    @return strip-unit($font-size) * 1rem;
  }
}

// _ty-ms
// ======
@function _ty-ms(
  $multiplier,
  $breakpoint: null,
  $typi-ms: $typi-ms,
  $typi-map: false
) {
  $ms-setting: null;
  @if map-has-key($typi-ms, $breakpoint) {
    $ms-setting: map-get($typi-ms, $breakpoint);
  } @else {
    $last-valid-ms: map-get($typi-map, last-valid-ms);
    $ms-setting: map-get($typi-ms, $last-valid-ms);
  }

  $ty-ms-base: null;
  $ty-ms-ratio: null;

  @for $i from 1 to length($ms-setting) + 1 {
    $val: nth($ms-setting, $i);


    // For combinations of multiple bases + multiple ratios
    @if type-of($val) == 'list' {
      @if not unitless(nth($val, 1)) {
        $ty-ms-base: $val;
      } @else {
        $ty-ms-ratio: $val;
      }
    }
    // For combinations of 1 base + multiple ratios
    @else {
      @if unitless($val) {
        @if $ty-ms-ratio == null {
          $ty-ms-ratio: $val;
        } @else if type-of($ty-ms-ratio) == "number" {
          $ty-ms-ratio: $ty-ms-ratio $val;
        } @else if type-of($ty-ms-ratio) == "list" {
          $ty-ms-ratio: append($ty-ms-ratio, $val);
        }
      }

      @else {
        @if $ty-ms-base == null {
          $ty-ms-base: $val;
        } @else if type-of($ty-ms-base) == 'number' {
          $ty-ms-base: ($ty-ms-base $val)
        } @else if type-of($ty-ms-base) == 'list' {
          $ty-ms-base: append($ty-ms-base, $val);
        }
      }
    }
  }

  @if $ty-ms-base == null {
    $ty-ms-base: 1em;
  }

  @return ms($multiplier, $ty-ms-base, $ty-ms-ratio);
}

// _ty-get-breakpoints
// ===================
@function _ty-get-breakpoints($breakpoints, $typi-ms, $target) {
  $_return: null;

  @each $breakpoint, $val in $breakpoints {
    @if type-of($typi-ms) == 'map' and map-has-key($typi-ms, $breakpoint) {
      @if not index($_return, $breakpoint) {
        $_return: append($_return, $breakpoint);
      }
    }

    @if map-has-key($target, $breakpoint) {
      @if not index($_return, $breakpoint) {
        $_return: append($_return, $breakpoint);
      }
    }
  }
  @return $_return;
}

// _ty-get-base-font
@function _ty-get-base-font($typi) {
  $base-map: map-get($typi, null);
  @return nth($base-map, 1);
}

// _ty-get-base-line-height
@function _ty-get-base-line-height($typi) {
  $base-map: map-get($typi, null);
  $base-line-height: null;

  @if length($base-map) > 1 {
    $base-line-height: nth($base-map, 2);
  } @else {
    @error "$typi map should contain a second argument (line-height) in the `null` key";
  }

  @if not unit($base-line-height) == "" {
    @error "line-height multiple on the `null` key should be unitless";
  }

  @return $base-line-height;
}
