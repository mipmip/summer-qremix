@mixin typi(
  $target-map,
  $breakpoints: $breakpoints,
  $typi: $typi,
  $typi-ms: $typi-ms,
  $base: false,
  $rem: true
) {
  $typi-map: (
    target: $target-map,
    breakpoints: $breakpoints,
    typi: $typi,
    base: $base,
    rem: $rem,
    ms: $typi-ms
  );

  $breakpoints-to-output: _ty-get-breakpoints($breakpoints, $typi-ms, $target-map);
  @each $breakpoint in $breakpoints-to-output {
    $target: $target-map;
    $typi-map: map-merge($typi-map, (breakpoint: $breakpoint));

    @if $breakpoint == null {
      @include _ty-write-props($typi-map);
    }

    @else {
      @if map-has-key($breakpoints, $breakpoint) {
        @include _ty-breakpoint($typi-map);
      } @else {
        @warn "Missing #{$breakpoint} in $breakpoints map";
      }
    }

    // Add previous valid breakpoint
    @if map-has-key($target, $breakpoint) {
      $typi-map: map-merge($typi-map, (last-valid-breakpoint: $breakpoint))
    }

    // Add previous valid ms
    @if type-of($typi-ms) == 'map' and map-has-key($typi-ms, $breakpoint)  {
      $typi-map: map-merge($typi-map, (last-valid-ms: $breakpoint))
    }
  }
}

@mixin typi-base(
  $typi: $typi,
  $breakpoints: $breakpoints,
  $typi-ms: $typi-ms,
  $base: true,
  $rem: true
) {
  @include typi(
    $typi,
    $breakpoints,
    $typi: $typi,
    $typi-ms: $typi-ms,
    $base: $base,
    $rem: $rem
  );
}

// Vertical rhythm function. Possible to output both EM and REM.
// Requires line height to be set on $typi map for 'null' breakpoint
@function vr($vr, $current-font: null, $typi: $typi) {
  $base-font: _ty-get-base-font($typi);
  $base-line-height: _ty-get-base-line-height($typi);
  $rhythm-context: $vr * $base-line-height;

  // Converts into EM if $current-font is provided
  @if $current-font {
    @if unit($current-font) == "px" {
      $rhythm-context: $rhythm-context * $base-font;

      @return $rhythm-context / $current-font * 1em;
    }

    @if unit($current-font) == "em" {
      @return $rhythm-context / _ty-strip-unit($current-font) * 1em;
    }

    @else {
      @error "Font sizes should either be px or em if $current-font is provided";
    }
  }

  @else {
    @if unit($base-line-height) == 'px' {
      @return $vr * $base-line-height / $base-font-size * 1rem;
    } @else {
      @return $vr * $base-line-height * 1rem;
    }
  }
}

// Responsive Vertical Rhythm
@mixin rvr($props, $vr, $typi: $typi) {
  $base-font: _ty-get-base-font($typi);
  $base-line-height: _ty-get-base-line-height($typi);
  $unit: unit($base-line-height);

  @each $prop in $props {
    @if $unit == 'px' {
      #{$prop}: $base-line-height / $base-font * 1rem * $vr;
    } @else {
      #{$prop}: $base-line-height * 1rem * $vr;
    }
    #{$prop}: calc(var(--baseline) * #{1rem * $vr});
  }
}